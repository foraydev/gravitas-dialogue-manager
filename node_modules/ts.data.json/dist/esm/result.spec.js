import * as chai from 'chai';
import { Ok, ok, err } from './result';
var expect = chai.expect;
describe('Result', function () {
    var toUpper = function (str) { return str.toUpperCase(); };
    var exclamation = function (str) { return str + "!"; };
    describe('Ok', function () {
        it('should wrap the value', function () {
            expect(new Ok('hola').value).to.equal('hola');
        });
        it('should chain transformations while mapping', function () {
            expect(ok('hola').map(toUpper).map(exclamation)).to.deep.equal(ok('HOLA!'));
        });
    });
    describe('Err', function () {
        it('should wrap the error', function () {
            expect(err('Wrong!')).to.deep.equal(err('Wrong!'));
        });
        it('should keep the first error while mapping', function () {
            expect(err('Wrong').map(toUpper).map(exclamation)).to.deep.equal(err('Wrong'));
        });
    });
    it('should allow chaining more than one transformation', function () {
        var onlyEven = function (num) {
            return num % 2 === 0 ? ok(num) : err('not even');
        };
        var example = function (n) {
            return onlyEven(n)
                .map(function (n2) { return n2 * 2; })
                .map(function (n2) { return Number(n2).toString(16); })
                .map(function (hex) { return "#" + hex; });
        };
        expect(example(5)).to.deep.equal(err('not even'));
        expect(example(6)).to.deep.equal(ok('#c'));
    });
});
