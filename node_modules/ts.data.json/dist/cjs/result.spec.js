"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai = __importStar(require("chai"));
var result_1 = require("./result");
var expect = chai.expect;
describe('Result', function () {
    var toUpper = function (str) { return str.toUpperCase(); };
    var exclamation = function (str) { return str + "!"; };
    describe('Ok', function () {
        it('should wrap the value', function () {
            expect(new result_1.Ok('hola').value).to.equal('hola');
        });
        it('should chain transformations while mapping', function () {
            expect(result_1.ok('hola').map(toUpper).map(exclamation)).to.deep.equal(result_1.ok('HOLA!'));
        });
    });
    describe('Err', function () {
        it('should wrap the error', function () {
            expect(result_1.err('Wrong!')).to.deep.equal(result_1.err('Wrong!'));
        });
        it('should keep the first error while mapping', function () {
            expect(result_1.err('Wrong').map(toUpper).map(exclamation)).to.deep.equal(result_1.err('Wrong'));
        });
    });
    it('should allow chaining more than one transformation', function () {
        var onlyEven = function (num) {
            return num % 2 === 0 ? result_1.ok(num) : result_1.err('not even');
        };
        var example = function (n) {
            return onlyEven(n)
                .map(function (n2) { return n2 * 2; })
                .map(function (n2) { return Number(n2).toString(16); })
                .map(function (hex) { return "#" + hex; });
        };
        expect(example(5)).to.deep.equal(result_1.err('not even'));
        expect(example(6)).to.deep.equal(result_1.ok('#c'));
    });
});
